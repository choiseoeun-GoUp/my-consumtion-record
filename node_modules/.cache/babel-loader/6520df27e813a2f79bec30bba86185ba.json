{"ast":null,"code":"var _jsxFileName = \"/Users/choeseoeun/my-consumption-record/src/Title.stories.js\";\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"// 앞에서 작성한 컴포넌트를 불러옵니다.\\nimport Title from \\\"./Title\\\";\\n\\n// title : 컴포넌트 이름으로, '/'를 넣어 카테고리화 할 수 있습니다.\\n//         이후 예시에서 조금 더 자세히 설명합니다.\\n// component : 어떤 컴포넌트를 가져와서 스토리로 만들 것인지 명시합니다.\\n// argTypes : 컴포넌트에 필요한 전달인자의 종류와 타입을 정해줍니다.\\n//            지금은 title, textColor이라는 전달인자에 text 타입이 필요함을 의미합니다.\\nexport default {\\n    title: \\\"Practice/Title\\\", \\n    component: Title,\\n    argTypes: {\\n        title: { control: \\\"text\\\" },\\n        textColor: {control: \\\"text\\\"}\\n    }\\n}\\n\\n// 템플릿을 만들어줍니다. 이 템플릿에서는\\n// Title 컴포넌트가 args를 전달받아 props로 내려줍니다.\\nconst Template = (args) => <Title {...args} />\\n\\n// Storybook에서 확인하고 싶은 컴포넌트는 export const로 작성합니다.\\n// 템플릿을 사용하여 Storybook에 넣어줄 스토리를 하나 만들어주었습니다.\\n// Template.bins({}); 는 정해진 문법이라고 생각하고 사용하시면 됩니다.\\nexport const RedTitle = Template.bind({});\\n\\n// 만들어준 스토리의 전달인자를 작성해줍니다.\\nRedTitle.args= {\\n    title: \\\"Red Title\\\",\\n    textColor: \\\"red\\\"\\n}\\n\\n// 스토리를 하나 더 만듭니다.\\nexport const BlueTitle = Template.bind({});\\n\\n// 스토리의 전달인자를 작성해줍니다.\\nBlueTitle.args= {\\n    title: \\\"Blue Title\\\",\\n    textColor: \\\"blue\\\"\\n}\"; // @ts-ignore\n\nvar __LOCATIONS_MAP__ = {\n  \"RedTitle\": {\n    \"startLoc\": {\n      \"col\": 17,\n      \"line\": 20\n    },\n    \"endLoc\": {\n      \"col\": 46,\n      \"line\": 20\n    },\n    \"startBody\": {\n      \"col\": 17,\n      \"line\": 20\n    },\n    \"endBody\": {\n      \"col\": 46,\n      \"line\": 20\n    }\n  },\n  \"BlueTitle\": {\n    \"startLoc\": {\n      \"col\": 17,\n      \"line\": 20\n    },\n    \"endLoc\": {\n      \"col\": 46,\n      \"line\": 20\n    },\n    \"startBody\": {\n      \"col\": 17,\n      \"line\": 20\n    },\n    \"endBody\": {\n      \"col\": 46,\n      \"line\": 20\n    }\n  }\n}; // 앞에서 작성한 컴포넌트를 불러옵니다.\n\nimport Title from \"./Title\"; // title : 컴포넌트 이름으로, '/'를 넣어 카테고리화 할 수 있습니다.\n//         이후 예시에서 조금 더 자세히 설명합니다.\n// component : 어떤 컴포넌트를 가져와서 스토리로 만들 것인지 명시합니다.\n// argTypes : 컴포넌트에 필요한 전달인자의 종류와 타입을 정해줍니다.\n//            지금은 title, textColor이라는 전달인자에 text 타입이 필요함을 의미합니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default {\n  title: \"Practice/Title\",\n  component: Title,\n  argTypes: {\n    title: {\n      control: \"text\"\n    },\n    textColor: {\n      control: \"text\"\n    }\n  }\n}; // 템플릿을 만들어줍니다. 이 템플릿에서는\n// Title 컴포넌트가 args를 전달받아 props로 내려줍니다.\n\nconst Template = args => /*#__PURE__*/_jsxDEV(Title, { ...args\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 28,\n  columnNumber: 28\n}, this); // Storybook에서 확인하고 싶은 컴포넌트는 export const로 작성합니다.\n// 템플릿을 사용하여 Storybook에 넣어줄 스토리를 하나 만들어주었습니다.\n// Template.bins({}); 는 정해진 문법이라고 생각하고 사용하시면 됩니다.\n\n\n_c = Template;\nexport const RedTitle = Template.bind({});\n; // 만들어준 스토리의 전달인자를 작성해줍니다.\n\nRedTitle.args = {\n  title: \"Red Title\",\n  textColor: \"red\"\n}; // 스토리를 하나 더 만듭니다.\n\nexport const BlueTitle = Template.bind({}); // 스토리의 전달인자를 작성해줍니다.\n\nBlueTitle.args = {\n  title: \"Blue Title\",\n  textColor: \"blue\"\n};\nRedTitle.parameters = {\n  storySource: {\n    source: \"(args) => <Title {...args} />\"\n  },\n  ...RedTitle.parameters\n};\nBlueTitle.parameters = {\n  storySource: {\n    source: \"(args) => <Title {...args} />\"\n  },\n  ...BlueTitle.parameters\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Template\");\nexport const __namedExportsOrder = [\"RedTitle\", \"BlueTitle\"];","map":{"version":3,"names":["__STORY__","__LOCATIONS_MAP__","Title","title","component","argTypes","control","textColor","Template","args","RedTitle","bind","BlueTitle","parameters","storySource","source"],"sources":["/Users/choeseoeun/my-consumption-record/src/Title.stories.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"// 앞에서 작성한 컴포넌트를 불러옵니다.\\nimport Title from \\\"./Title\\\";\\n\\n// title : 컴포넌트 이름으로, '/'를 넣어 카테고리화 할 수 있습니다.\\n//         이후 예시에서 조금 더 자세히 설명합니다.\\n// component : 어떤 컴포넌트를 가져와서 스토리로 만들 것인지 명시합니다.\\n// argTypes : 컴포넌트에 필요한 전달인자의 종류와 타입을 정해줍니다.\\n//            지금은 title, textColor이라는 전달인자에 text 타입이 필요함을 의미합니다.\\nexport default {\\n    title: \\\"Practice/Title\\\", \\n    component: Title,\\n    argTypes: {\\n        title: { control: \\\"text\\\" },\\n        textColor: {control: \\\"text\\\"}\\n    }\\n}\\n\\n// 템플릿을 만들어줍니다. 이 템플릿에서는\\n// Title 컴포넌트가 args를 전달받아 props로 내려줍니다.\\nconst Template = (args) => <Title {...args} />\\n\\n// Storybook에서 확인하고 싶은 컴포넌트는 export const로 작성합니다.\\n// 템플릿을 사용하여 Storybook에 넣어줄 스토리를 하나 만들어주었습니다.\\n// Template.bins({}); 는 정해진 문법이라고 생각하고 사용하시면 됩니다.\\nexport const RedTitle = Template.bind({});\\n\\n// 만들어준 스토리의 전달인자를 작성해줍니다.\\nRedTitle.args= {\\n    title: \\\"Red Title\\\",\\n    textColor: \\\"red\\\"\\n}\\n\\n// 스토리를 하나 더 만듭니다.\\nexport const BlueTitle = Template.bind({});\\n\\n// 스토리의 전달인자를 작성해줍니다.\\nBlueTitle.args= {\\n    title: \\\"Blue Title\\\",\\n    textColor: \\\"blue\\\"\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"RedTitle\":{\"startLoc\":{\"col\":17,\"line\":20},\"endLoc\":{\"col\":46,\"line\":20},\"startBody\":{\"col\":17,\"line\":20},\"endBody\":{\"col\":46,\"line\":20}},\"BlueTitle\":{\"startLoc\":{\"col\":17,\"line\":20},\"endLoc\":{\"col\":46,\"line\":20},\"startBody\":{\"col\":17,\"line\":20},\"endBody\":{\"col\":46,\"line\":20}}};\n    \n// 앞에서 작성한 컴포넌트를 불러옵니다.\nimport Title from \"./Title\";\n\n// title : 컴포넌트 이름으로, '/'를 넣어 카테고리화 할 수 있습니다.\n//         이후 예시에서 조금 더 자세히 설명합니다.\n// component : 어떤 컴포넌트를 가져와서 스토리로 만들 것인지 명시합니다.\n// argTypes : 컴포넌트에 필요한 전달인자의 종류와 타입을 정해줍니다.\n//            지금은 title, textColor이라는 전달인자에 text 타입이 필요함을 의미합니다.\nexport default {\n    title: \"Practice/Title\", \n    component: Title,\n    argTypes: {\n        title: { control: \"text\" },\n        textColor: {control: \"text\"}\n    }\n}\n\n// 템플릿을 만들어줍니다. 이 템플릿에서는\n// Title 컴포넌트가 args를 전달받아 props로 내려줍니다.\nconst Template = (args) => <Title {...args} />\n\n// Storybook에서 확인하고 싶은 컴포넌트는 export const로 작성합니다.\n// 템플릿을 사용하여 Storybook에 넣어줄 스토리를 하나 만들어주었습니다.\n// Template.bins({}); 는 정해진 문법이라고 생각하고 사용하시면 됩니다.\nexport const RedTitle = Template.bind({});;\n\n// 만들어준 스토리의 전달인자를 작성해줍니다.\nRedTitle.args= {\n    title: \"Red Title\",\n    textColor: \"red\"\n}\n\n// 스토리를 하나 더 만듭니다.\nexport const BlueTitle = Template.bind({});\n\n// 스토리의 전달인자를 작성해줍니다.\nBlueTitle.args= {\n    title: \"Blue Title\",\n    textColor: \"blue\"\n}\n\n\nRedTitle.parameters = { storySource: { source: \"(args) => <Title {...args} />\" }, ...RedTitle.parameters };\nBlueTitle.parameters = { storySource: { source: \"(args) => <Title {...args} />\" }, ...BlueTitle.parameters };"],"mappings":";;AACI;AACA;AACA;AACA,IAAIA,SAAS,GAAG,wiCAAhB,C,CACA;;AACA,IAAIC,iBAAiB,GAAG;EAAC,YAAW;IAAC,YAAW;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAAZ;IAAiC,UAAS;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAA1C;IAA+D,aAAY;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAA3E;IAAgG,WAAU;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB;EAA1G,CAAZ;EAA4I,aAAY;IAAC,YAAW;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAAZ;IAAiC,UAAS;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAA1C;IAA+D,aAAY;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB,CAA3E;IAAgG,WAAU;MAAC,OAAM,EAAP;MAAU,QAAO;IAAjB;EAA1G;AAAxJ,CAAxB,C,CAEJ;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,eAAe;EACXC,KAAK,EAAE,gBADI;EAEXC,SAAS,EAAEF,KAFA;EAGXG,QAAQ,EAAE;IACNF,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAX,CADD;IAENC,SAAS,EAAE;MAACD,OAAO,EAAE;IAAV;EAFL;AAHC,CAAf,C,CASA;AACA;;AACA,MAAME,QAAQ,GAAIC,IAAD,iBAAU,QAAC,KAAD,OAAWA;AAAX;EAAA;EAAA;EAAA;AAAA,QAA3B,C,CAEA;AACA;AACA;;;KAJMD,Q;AAKN,OAAO,MAAME,QAAQ,GAAGF,QAAQ,CAACG,IAAT,CAAc,EAAd,CAAjB;AAAmC,C,CAE1C;;AACAD,QAAQ,CAACD,IAAT,GAAe;EACXN,KAAK,EAAE,WADI;EAEXI,SAAS,EAAE;AAFA,CAAf,C,CAKA;;AACA,OAAO,MAAMK,SAAS,GAAGJ,QAAQ,CAACG,IAAT,CAAc,EAAd,CAAlB,C,CAEP;;AACAC,SAAS,CAACH,IAAV,GAAgB;EACZN,KAAK,EAAE,YADK;EAEZI,SAAS,EAAE;AAFC,CAAhB;AAMAG,QAAQ,CAACG,UAAT,GAAsB;EAAEC,WAAW,EAAE;IAAEC,MAAM,EAAE;EAAV,CAAf;EAA4D,GAAGL,QAAQ,CAACG;AAAxE,CAAtB;AACAD,SAAS,CAACC,UAAV,GAAuB;EAAEC,WAAW,EAAE;IAAEC,MAAM,EAAE;EAAV,CAAf;EAA4D,GAAGH,SAAS,CAACC;AAAzE,CAAvB"},"metadata":{},"sourceType":"module"}